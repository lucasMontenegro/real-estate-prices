"use strict";

// Do this as the first thing so that any code reading it knows the right env.
const nodeEnv = "development";
process.env.BABEL_ENV = nodeEnv;
process.env.NODE_ENV = nodeEnv;

const fs = require("fs");
const path = require("path");
const chalk = require("react-dev-utils/chalk");
const webpack = require("webpack");
const WebpackDevServer = require("webpack-dev-server");
const clearConsole = require("react-dev-utils/clearConsole");
const checkRequiredFiles = require("react-dev-utils/checkRequiredFiles");
const {
  choosePort,
  createCompiler,
  prepareProxy,
  prepareUrls,
} = require("react-dev-utils/WebpackDevServerUtils");
const openBrowser = require("react-dev-utils/openBrowser");
const getProjectConfig = require("../getProjectConfig");
const createWebpackConfig = require("../createWebpackConfig");
const createDevServerConfig = require("./createDevServerConfig");

function devServer(opts = {}) {
  const cfg = getProjectConfig("devServer", nodeEnv, opts);

  // We require that you explicitly set browsers and do not fall back to
  // browserslist defaults.
  const { checkBrowsers } = require("react-dev-utils/browsersHelper");
  checkBrowsers(cfg.packageDir, cfg.isInteractive)
    .then(() => {
      // We attempt to use the preferred port but if it's busy, we offer the user to
      // run on a different one. `choosePort()` Promise resolves to the next free port.
      return choosePort(cfg.devServer.host, cfg.devServer.favoritePort);
    })
    .then((port) => {
      if (port == null) {
        // We have not found a port.
        return;
      }

      const urls = prepareUrls(
        cfg.devServer.useHttps ? "https" : "http",
        cfg.devServer.host,
        port,
        cfg.mountingPath.slice(0, -1)
      );

      // Create a webpack compiler that is configured with custom messages.
      const compiler = createCompiler({
        appName: require(cfg.packageDotJsonPath).name,
        config: createWebpackConfig(cfg),
        devSocket: {
          warnings: (warnings) =>
            wpDevServer.sockWrite(wpDevServer.sockets, "warnings", warnings),
          errors: (errors) =>
            wpDevServer.sockWrite(wpDevServer.sockets, "errors", errors),
        },
        urls,
        useYarn: cfg.useYarn,
        useTypeScript: cfg.useTypeScript,
        tscCompileOnError: cfg.tscCompileOnError,
        webpack,
      });
      // Serve webpack assets generated by the compiler over a web server.
      const serverConfig = createDevServerConfig({
        projectConfig: cfg,
        // Load proxy config
        proxy: prepareProxy(
          require(cfg.packageDotJsonPath).proxy,
          cfg.publicDir,
          cfg.mountingPath
        ),
        allowedHost: urls.lanUrlForConfig,
      });
      const wpDevServer = new WebpackDevServer(compiler, serverConfig);
      // Launch WebpackDevServer.
      wpDevServer.listen(port, cfg.devServer.host, (err) => {
        if (err) {
          return console.log(err);
        }
        if (cfg.isInteractive) {
          clearConsole();
        }

        console.log(chalk.cyan("Starting the development server...\n"));
        openBrowser(urls.localUrlForBrowser);
      });

      ["SIGINT", "SIGTERM"].forEach(function (sig) {
        process.on(sig, function () {
          wpDevServer.close();
          process.exit();
        });
      });

      if (!cfg.isCI) {
        // Gracefully exit when stdin ends
        process.stdin.on("end", function () {
          wpDevServer.close();
          process.exit();
        });
      }
    })
    .catch((err) => {
      if (err && err.message) {
        console.log(err.message);
      }
      process.exit(1);
    });
}

module.exports = devServer;
